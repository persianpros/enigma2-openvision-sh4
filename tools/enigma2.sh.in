#!/bin/sh

prefix="@prefix@"
exec_prefix="@exec_prefix@"
datarootdir="@datarootdir@"

export PATH="${PATH}:/usr/script"

if [ -d /home/root ]; then
	export HOME="/home/root"
	cd
fi

# write on vfd display
echo "OV" > /dev/vfd

if [ -e @libdir@/enigma2/python/Plugins/SystemPlugins/SH4BoosterControl/plugin.pyo ] || [ -e @libdir@/enigma2/python/Plugins/SystemPlugins/SH4BoosterControl/plugin.py ]; then
	cpufreq=`cat /etc/enigma2/settings | grep config.plugins.booster.normalfrequenz | cut -d "=" -f2`
	case $cpufreq in
		200) overclk=5123;;
		300) overclk=2561;;
		450) overclk=3841;;
		500) overclk=12803;;
		540) overclk=4609;;
		600) overclk=5121;;
		630) overclk=5377;;
		650) overclk=16643;;
		700) overclk=17923;;
		710) overclk=18179;;
		750) overclk=19203;;
		775) overclk=39686;;
		800) overclk=20483;;
		*) cpufreq=540
		overclk=4609;;
	esac
	echo $overclk > /proc/cpu_frequ/pll0_ndiv_mdiv
	echo "Setting CPU clock speed to $cpufreq MHz (overclk=$overclk)"
fi

# Check for sundtek tuner helper lib.
if [ -e /opt/lib/libmediaclient.so ]; then
	LIBS="/opt/lib/libmediaclient.so @libdir@/libopen.so.0.0.0"
else
	LIBS="@libdir@/libopen.so.0.0.0"
fi

# This should not be done as it will suppress the appropriate diagnostic message from within Enigma2.
#
# if [ ! -e /etc/enigma2/settings ]; then
# 	touch /etc/enigma2/settings
# fi

# Enigma main loop.
while : ; do
	# Show bootlogo on enigma2 start.
	SKIN=`sed -En 's|^config\.skin\.primary_skin=(.+)/skin\.xml$|\1|p' "@sysconfdir@/enigma2/settings"`
	if [ -z "${SKIN}" ]; then
		SKIN=`strings -n 10 "@prefix@/lib/enigma2/python/skin.pyo" | egrep -o -m 1 ".+/skin.xml" | sed 's|/skin.xml.*||'`
	fi
	if [ -n "${SKIN}" ]; then
		SEARCHDIRS="@sysconfdir@/enigma2/$skin @sysconfdir@/enigma2/skin_common @sysconfdir@/enigma2 @datadir@/enigma2/$skin @datadir@/enigma2/skin_default @datadir@/enigma2"
	else
		SEARCHDIRS="@sysconfdir@/enigma2/skin_common @sysconfdir@/enigma2 @datadir@/enigma2/skin_default @datadir@/enigma2"
	fi
	if [ -x "@bindir@/exteplayer3" ]; then
		for DIR in "$SEARCHDIRS"
		do
			if [ -d "${DIR}" ] && [ -f "${DIR}/bootlogo.mp4" ]; then
				"@bindir@/exteplayer3" "${DIR}/bootlogo.mp4"
				break
			fi
		done
	else
		if [ -x "@bindir@/showiframe" ]; then
			for DIR in "${SEARCHDIRS}"
			do
				if [ -d "${DIR}" ] && [ -f "${DIR}/bootlogo.mvi" ]; then
					"@bindir@/showiframe" "${DIR}/bootlogo.mvi"
					break
				fi
			done
		fi
	fi

	# Hook to execute scripts always before enigma2 start.
	if [ -x "@bindir@/enigma2_pre_start.sh" ]; then
		"@bindir@/enigma2_pre_start.sh"
	fi

	# Dreamci.
	if [ -x "@bindir@/enigma2_pre_start_ciplus.sh" ]; then
		"@bindir@/enigma2_pre_start_ciplus.sh"
	fi

	# Start enigma.
	sync

	(sleep 1; echo "Enigma2 is the main application so adjust oom score!"; PID=$(pidof enigma2); \
		[ -e "/proc/${PID}/oom_score_adj" ] && echo "-999" > "/proc/${PID}/oom_score_adj" || echo "-17" > "/proc/${PID}/oom_adj";) &

	# Set the debug level to be used for enigma2 logging.
	if [ -z "${ENIGMA_DEBUG_LVL}" ]; then
		DEBUGLEVEL=`sed -En 's|^config\.crash\.debugLevel=(.+)$|\1|p' "@sysconfdir@/enigma2/settings"`
		[ -n "${DEBUGLEVEL}" ] || DEBUGLEVEL="3"
		DEBUG_LVL="${DEBUGLEVEL}"
	else
		DEBUG_LVL="${ENIGMA_DEBUG_LVL}"
	fi

	# Set time format used to prefix each line in the debug logs.
	DEBUGTIME=`sed -En 's|^config\.crash\.debugTimeFormat=(.+)$|\1|p' "@sysconfdir@/enigma2/settings"`
	[ -n "${DEBUGTIME}" ] || DEBUGTIME="2"
	DEBUG_TIME="${DEBUGTIME}"

	if [ "${DEBUG_LVL}" -lt "4" ]; then
		LD_PRELOAD="${LIBS}" ENIGMA_DEBUG_LVL="${DEBUG_LVL}" ENIGMA_DEBUG_TIME="${DEBUG_TIME}" "@bindir@/enigma2"
	else
		DEBUGDIR=`sed -En 's|^config\.crash\.debugPath=(.+)$|\1|p' "@sysconfdir@/enigma2/settings"`
		[ -n "${DEBUGDIR}" ] && [ -d "${DEBUGDIR}" ] || DEBUGDIR="/home/root/logs/"
		# Remove old logfiles.
		KEEP=`sed -En 's|^config\.crash\.debugFileCount=(.+)$|\1|p' "@sysconfdir@/enigma2/settings"`
		[ -n "${KEEP}" ] || KEEP="5"
		for FILE in `ls -t "${DEBUGDIR}"enigma2_debug_*.log`; do
			let "KEEP--"
			if [ "${KEEP}" -lt "1" ]; then
				rm "${FILE}"
			fi
		done
		# Today's log file.
		FILE="${DEBUGDIR}enigma2_debug_$(date +%Y-%m-%d_%H-%M-%S).log"
		LD_PRELOAD="${LIBS}" ENIGMA_DEBUG_LVL="${DEBUG_LVL}" ENIGMA_DEBUG_TIME="${DEBUG_TIME}" "@bindir@/enigma2" >> "${FILE}" 2>&1
	fi


	# Enigma2 exit codes:
	#
	#  1 - halt
	#  2 - reboot
	#  3 - restart enigma
	#  4 - front processor upgrade
	#  5 - install new settings
	#  7 - manufacturer reset
	# 42 - offline update
	# 43 - restart for autoinstall
	#
	# >128 signal

	RET=$?
	case ${RET} in
		1)
			/sbin/halt
			;;
		2)
			[ -f /proc/stb/fp/force_restart ] && echo "1" > /proc/stb/fp/force_restart
			/sbin/reboot
			;;
		3)
			;;
		4)
			/sbin/rmmod lcd
			"@sbindir@/fpupgrade" --upgrade 2>&1 | tee /home/root/fpupgrade.log
			sleep 1;
			/sbin/rmmod fp
			/sbin/modprobe fp
			/sbin/reboot
			;;
		5)
			if ! grep -q config.misc.RestartUI /etc/enigma2/settings; then
				echo "config.misc.RestartUI=true" >>/etc/enigma2/settings
			fi
			;;
		7)
			rm -R /etc/enigma2
			;;
		42)
			df -P | grep -v "tmpfs " | awk '{print $6}' | tail -n +3 > /tmp/upgrade_mountpoints.txt
			while read LINE; do
				if [ -f "${LINE}/var/lib/opkg/status" ]; then
				DESTS="${DESTS}" --add-dest "${LINE}":"${LINE}"
			fi
			done < /tmp/upgrade_mountpoints.txt
			# Bind the console (when available).
			[ -f /sys/class/vtconsole/vtcon1/bind ] && echo "1" > /sys/class/vtconsole/vtcon1/bind
			PREVUPD="0"
			CURRUPD="999"
			opkg update 2>&1 | tee /home/root/opkgupgrade.log
			while [ "${CURRUPD}" -gt "0" ] && [ "${CURRUPD}" -ne "${PREVUPD}" ]; do
				opkg upgrade "${DESTS}" 2>&1 | tee -a /home/root/opkgupgrade.log
				PREVUPD="${CURRUPD}"
				CURRUPD=`opkg list-upgradable | wc -l`
				echo "===> ${CURRUPD} PACKAGE(S) REMAINING" >> /home/root/ipkupgrade.log
			done
			/sbin/reboot
			;;
		43)
			# Auto install and autobackup.
			[ -f /sys/class/vtconsole/vtcon1/bind ] && echo "1" > /sys/class/vtconsole/vtcon1/bind
			/etc/init.d/settings-restore.sh
			/etc/init.d/avahi-daemon stop
			ifdown eth1
			ip addr flush dev eth1 scope global
			ifdown eth0
			ip addr flush dev eth0 scope global
			/etc/init.d/networking stop
			killall -9 udhcpc
			rm /var/run/udhcpc*
			/etc/init.d/dbus-1 reload
			/etc/init.d/networking start
			/etc/init.d/avahi-daemon start
			if [ ! -f /etc/.doNotAutoinstall ]; then
				touch /etc/.doAutoinstall
			else
				rm -f /etc/.doNotAutoInstall
			fi
			break
			;;
		*)
			break
			;;
	esac
done
